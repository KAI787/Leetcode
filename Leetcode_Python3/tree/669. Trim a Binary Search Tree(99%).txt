# 如果root为空，那么返回None
# 如果root.val<L，那么左边的值都不能用了，返回trimBST(root.right...)
# 同理若，root.val>R, 那么右边的值不能用了
# 如果root.val, 在L和R之间，那么对root.left进行trimBST(left)操作
# 右侧同理

class Solution:
    def trimBST(self, root, L, R):
        """
        :type root: TreeNode
        :type L: int
        :type R: int
        :rtype: TreeNode
        """
        if not root:
            return None
        if root.val < L:
            return self.trimBST(root.right, L, R)
        if root.val > R:
            return self.trimBST(root.left, L, R)
        root.left = self.trimBST(root.left, L, R)
        root.right = self.trimBST(root.right, L, R)
        return root